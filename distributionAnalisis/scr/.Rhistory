tryCatch({
m_cosecha<- fitHMM(data = dataCosecha, stepDist = modelStep,
nbStates = 2 , stepPar0 = stepPar, angleDist = "none")
},
error=function(cond){
print("error de parametros")
print(stepPar)
message(cond)
}
)
minNegLike <-  m_cosecha$mod$minimum
AIC_model <- AIC(m_cosecha)
DF_TEMP <- data.frame("model"= modelStep,
"prior_par0_st1_st2"= paste(par0[1], "_", par0[2]),
"prior_par1_st1_st2"=  paste(par1[1], "_", par1[2]),
"minNegLike" = minNegLike,
"AIC_model" = AIC_model,
"st1_par0"= m_cosecha$mle$stepPar[1,1],
"st1_par1"= m_cosecha$mle$stepPar[2,1],
"st2_par0"= m_cosecha$mle$stepPar[1,2],
"st2_par1"= m_cosecha$mle$stepPar[2,2])
DF_TOTAL <- rbind(DF_TOTAL, DF_TEMP)
}
}
DF_TOTAL <- DF_TOTAL%>%
filter(model != 0)
}
write_csv(DF_TOTAL, paste("../output/wholeTable_100repsPorFinca",as.character(mode), ".csv", sep = "_"))
}
#  we create the movehmm object
for (mode in c("E", "C")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
write_csv(dataCosecha, paste("../output/dataCosecha_PorFinca",as.character(mode), ".csv", sep = "_"))
dataCosechaRes <- dataCosecha %>%
summarise(MeanSizeStep = mean(step), SDSizeStepp = sd(step))
DF_TOTAL <- data.frame("model"= 0,
"prior_par0_st1_st2"= 0,
"prior_par1_st1_st2" = 0,
"minNegLike" = 0,
"AIC_model" = 0,
"st1_par0"= 0,
"st1_par1"=0,
"st2_par0"=0,
"st2_par1"= 0)
repetitions <- seq(1, 100,1)
runModel <- "no"
if (runModel == "yes"){
for (modelStep in c("weibull", "gamma")){
print(modelStep)
rangePar0 <- runif(10000, rangosDist[[modelStep]][[1]][1], rangosDist[[modelStep]][[1]][2])
rangePar1 <- runif(10000, rangosDist[[modelStep]][[2]][1], rangosDist[[modelStep]][[2]][2])
for (rep in repetitions){
par0 <- c(sample(rangePar0,1, replace= TRUE),
sample(rangePar0,1, replace= TRUE)) # step mean (two parameters: one for each state)
par1 <- c(sample(rangePar1,1, replace= TRUE),
sample(rangePar1,1, replace= TRUE))
par0 <- round(par0, 4)
par1 <- round(par1, 4)
#print(par0)
#print(par1)
stepPar <- c(par0,par1)
#op1
tryCatch({
m_cosecha<- fitHMM(data = dataCosecha, stepDist = modelStep,
nbStates = 2 , stepPar0 = stepPar, angleDist = "none")
},
error=function(cond){
print("error de parametros")
print(stepPar)
message(cond)
}
)
minNegLike <-  m_cosecha$mod$minimum
AIC_model <- AIC(m_cosecha)
DF_TEMP <- data.frame("model"= modelStep,
"prior_par0_st1_st2"= paste(par0[1], "_", par0[2]),
"prior_par1_st1_st2"=  paste(par1[1], "_", par1[2]),
"minNegLike" = minNegLike,
"AIC_model" = AIC_model,
"st1_par0"= m_cosecha$mle$stepPar[1,1],
"st1_par1"= m_cosecha$mle$stepPar[2,1],
"st2_par0"= m_cosecha$mle$stepPar[1,2],
"st2_par1"= m_cosecha$mle$stepPar[2,2])
DF_TOTAL <- rbind(DF_TOTAL, DF_TEMP)
}
}
DF_TOTAL <- DF_TOTAL%>%
filter(model != 0)
write_csv(DF_TOTAL, paste("../output/wholeTable_100repsPorFinca",as.character(mode), ".csv", sep = "_"))
}
}
dataCosecha_C <- read.csv("../output/dataCosecha_PorFinca_C_.csv")
dataCosecha_E<- read.csv("../output/dataCosecha_PorFinca_E_.csv")
DF_DISTRI_E <-DF_DISTRI  %>%
filter(plantation == "E")
DF_DISTRI_C <- DF_DISTRI %>%
filter(plantation == "C")
CAJADIST_E<- dataCosecha_E %>%
ggplot()+
geom_boxplot(aes(x= step), fill= "#EEEEEE")+
theme_bw()+
theme(text = element_text(size = 20))+
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())+
xlim(0, 120)+
labs(x= "Step length (m)", y= "")
CAJADIST_E
DIS_PLOT_E<- dataCosecha_E %>%
ggplot() +
geom_histogram(size= 0.2,
aes(x= as.numeric(step),
y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]),
binwidth=1, color= "black", fill= "#EEEEEE") +
geom_line(data = DF_DISTRI_E, size= 0.8, aes(x= X, y= PDF, col= as.factor(state)))+
scale_color_manual(values =
mycols3c)+
facet_wrap(~plantation)+
ylim(0, 0.32)+
theme_bw()+
theme(text = element_text(size = 20))+
labs(x= "Step length (m)", y= "Frequency", col= "State")
DIS_PLOT_E
DIS_PLOT_E<- dataCosecha_E %>%
ggplot() +
geom_histogram(size= 0.2,
aes(x= as.numeric(step),
y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]),
binwidth=1, color= "black", fill= "#EEEEEE") +
geom_line(data = DF_DISTRI_E, size= 0.8, aes(x= X, y= PDF, col= as.factor(state)))+
scale_color_manual(values =
groupColors2)+
facet_wrap(~plantation)+
ylim(0, 0.32)+
theme_bw()+
theme(text = element_text(size = 20))+
labs(x= "Step length (m)", y= "Frequency", col= "State")
DIS_PLOT_E
CAJADIST_C<- dataCosecha_C %>%
ggplot()+
geom_boxplot(aes(x= step), fill= "#EEEEEE")+
theme_bw()+
theme(text = element_text(size = 20))+
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())+
xlim(0, 120)+
labs(x= "Step length (m)", y= "")
CAJADIST_C
DIS_PLOT_C<- dataCosecha_C %>%
ggplot() +
geom_histogram(size= 0.2,
aes(x= as.numeric(step),
y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]),
binwidth=1, color= "black", fill= "#EEEEEE") +
geom_line(data = DF_DISTRI_C, size= 0.8, aes(x= X, y= PDF, col= as.factor(state)))+
scale_color_manual(values =
groupColors2)+
facet_wrap(~plantation)+
ylim(0, 0.32)+
theme_bw()+
theme(text = element_text(size = 20))+
labs(x= "Step length (m)", y= "Frequency", col= "State")
DIS_PLOT_C
str(dataCosecha_C)
str(dataCosecha)
MIN_gamma_2
modelos <- list("C" = 0, "E"= 0)  ##segun el articulo
modelos$C
mode
modelos$mode
modelos["C"]
modelos[as.character(mode)]
modelos <- list("C" = 0, "E"= 0)  ##segun el articulo
for (mode in c("C", "E")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
modelos_p <- list("gamma" = 0,
"weibull" = 0)
for (i in seq(1,dim(MIN_gamma_2)[1],1)){
par0_p <- as.numeric(c(MIN_gamma_2$prior_par0_st1[i], MIN_gamma_2$prior_par0_st2[i]))
par1_p <- as.numeric(c(MIN_gamma_2$prior_par1_st1[i], MIN_gamma_2$prior_par1_st2[i]))
stepPar0_p <- c(par0_p, par1_p)
#print(stepPar0_p)
#op1
m_cosecha_p<- fitHMM(data = dataCosecha, nbStates = 2 , stepPar0 = stepPar0_p, angleDist = "none", stepDist = as.character(DF_TOTAL_MIN$model[i]))
modelos_p[[as.character(DF_TOTAL_MIN$model[i])]] <- m_cosecha_p
}
modelos[as.character(mode)] <- modelos_p ##segun el articulo
}
modelos
modelos$C
modelos$E
modelos <- list("C" = 0, "E"= 0)  ##segun el articulo
for (mode in c("C", "E")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
#modelos_p <- list("gamma" = 0,
#     "weibull" = 0)
modelos_p <- list("gamma" = 0)
for (i in seq(1,dim(MIN_gamma_2)[1],1)){
par0_p <- as.numeric(c(MIN_gamma_2$prior_par0_st1[i], MIN_gamma_2$prior_par0_st2[i]))
par1_p <- as.numeric(c(MIN_gamma_2$prior_par1_st1[i], MIN_gamma_2$prior_par1_st2[i]))
stepPar0_p <- c(par0_p, par1_p)
#print(stepPar0_p)
#op1
m_cosecha_p<- fitHMM(data = dataCosecha, nbStates = 2 , stepPar0 = stepPar0_p, angleDist = "none", stepDist = as.character(DF_TOTAL_MIN$model[i]))
modelos_p[[as.character(DF_TOTAL_MIN$model[i])]] <- m_cosecha_p
}
modelos[as.character(mode)] <- modelos_p ##segun el articulo
}
for (i in seq(1,dim(MIN_gamma_2)[1],1)){print(i)}
MIN_gamma_2$prior_par0_st1[1]
MIN_gamma_2$prior_par0_st1[2]
View(MIN_gamma_2)
modelos <- list("C" = 0, "E"= 0)  ##segun el articulo
for (mode in c("C", "E")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
MIN_gamma_2_F <- MIN_gamma_2 %>%filter (farm == as.character(mode))
#modelos_p <- list("gamma" = 0,
#     "weibull" = 0)
modelos_p <- list("gamma" = 0)
par0_p <- as.numeric(c(MIN_gamma_2_F$prior_par0_st1, MIN_gamma_2_F$prior_par0_st2))
par1_p <- as.numeric(c(MIN_gamma_2_F$prior_par1_st1, MIN_gamma_2_F$prior_par1_st2))
stepPar0_p <- c(par0_p, par1_p)
#print(stepPar0_p)
#op1
m_cosecha_p<- fitHMM(data = dataCosecha, nbStates = 2 , stepPar0 = stepPar0_p, angleDist = "none", stepDist = as.character(MIN_gamma_2_F$model))
modelos_p[[as.character(DF_TOTAL_MIN$model[i])]] <- m_cosecha_p
modelos[as.character(mode)] <- modelos_p ##segun el articulo
}
modelos$C
modelos$E
#plotStates(modelos_p$gamma, ask = F, animals = c( "H_Fran9", "I_Car12"))
plot(modelos$C, animals = c("C_2", "E_6"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
plot(modelos$C, animals = c("C_2"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
#plotStates(modelos_p$gamma, ask = F, animals = c( "H_Fran9", "I_Car12"))
plot(modelos$C, ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
#plotStates(modelos_p$gamma, ask = F, animals = c( "H_Fran9", "I_Car12"))
plot(modelos$E, ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
modelos_p
modelos_p$gamma
modelos <- list("C" = 0, "E"= 0)  ##segun el articulo
for (mode in c("C", "E")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
MIN_gamma_2_F <- MIN_gamma_2 %>%filter (farm == as.character(mode))
#modelos_p <- list("gamma" = 0,
#     "weibull" = 0)
modelos_p <- list("gamma" = 0)
par0_p <- as.numeric(c(MIN_gamma_2_F$prior_par0_st1, MIN_gamma_2_F$prior_par0_st2))
par1_p <- as.numeric(c(MIN_gamma_2_F$prior_par1_st1, MIN_gamma_2_F$prior_par1_st2))
stepPar0_p <- c(par0_p, par1_p)
#print(stepPar0_p)
#op1
m_cosecha_p<- fitHMM(data = dataCosecha, nbStates = 2 , stepPar0 = stepPar0_p, angleDist = "none", stepDist = as.character(MIN_gamma_2_F$model))
modelos_p[[as.character(DF_TOTAL_MIN$model[i])]] <- m_cosecha_p
dataCosecha_V <- dataCosecha
dataCosecha_V$state <- viterbi(modelos_p$gamma)
dataCosecha_V <- dataCosecha_V %>%
mutate(conteo = 1)%>%
group_by(ID) %>%
mutate(contador = cumsum(conteo))
write.csv(dataCosecha_V, paste("../data/analyzedData_figuresFINCA", as.character(mode),".csv", sep = "_"))
modelos[as.character(mode)] <- modelos_p ##segun el articulo
}
library(ggplot2)
library(dplyr)
library(tidyverse)
library(moveHMM)
library(knitr)
library(reshape2)
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
groupColors2 <- c("#021128", "#fd9706")
mycols3c <-c("#759580", "#1b4a64")
#load the data
WP_COSECHA_UTM_SP <- read.csv("../data/cleanData_wayPointsCoffee_UTM.csv", stringsAsFactors = FALSE )
#punctual modifications
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>%
mutate(finca = replace(finca, finca == "Ecological", "E")) %>%
mutate(finca = replace(finca, finca == "Conventional", "C"))
#WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>%
# filter(finca == mode)
#normalization of UTM
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>% rowwise() %>%
group_by(finca, ID_POR_FINCA, pante)%>%
mutate(xNorm = x_UTM - min(x_UTM)) %>%
mutate(yNorm = y_UTM - min(y_UTM))
#now the precision (not the accuracy) of the GPS goes to 5 decimal points (lat y lot) and this is equivalent to ~1m
#so we can round the xNorm and y yNorm
WP_COSECHA_UTM_SP$xNorm <- round(WP_COSECHA_UTM_SP$xNorm, 0)
WP_COSECHA_UTM_SP$yNorm <- round(WP_COSECHA_UTM_SP$yNorm, 0)
#we remove some spurious data were delta = 0
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>%
filter(delta !=0)%>%
unite("Finca_ID", finca, ID_POR_FINCA, remove = TRUE)
#we create this ID column to prepare the data for movehmm
WP_COSECHA_UTM_SP_PRE <- WP_COSECHA_UTM_SP %>%
dplyr::select("ID" = Finca_ID, xNorm, yNorm)
#we remove the pante information as it is not relevant for the analysis
WP_COSECHA_UTM_SP_PRE$pante <- NULL
WP_COSECHA_UTM_SP_PRE <- WP_COSECHA_UTM_SP_PRE %>%
separate(ID, into= c("Finca", "IDperFinca"), remove= FALSE)
rangosDist <- list("gamma" = list("mean" = c(0.1, 10), "sd" = c(0.1,10)),
"weibull" = list("shape" = c(0.1, 2.7), "scale" = c(0.1,15))  ##segun el articulo
)
DF_rangos <- data.frame("value" = c("min", "max"))
DF_rangos <- cbind(DF_rangos, as.data.frame(rangosDist))
kable(DF_rangos, caption = "Minimun and maximum values of the prior parameters for each distribution")
#  we create the movehmm object
for (mode in c("E", "C")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
write_csv(dataCosecha, paste("../output/dataCosecha_PorFinca",as.character(mode), ".csv", sep = "_"))
dataCosechaRes <- dataCosecha %>%
summarise(MeanSizeStep = mean(step), SDSizeStepp = sd(step))
DF_TOTAL <- data.frame("model"= 0,
"prior_par0_st1_st2"= 0,
"prior_par1_st1_st2" = 0,
"minNegLike" = 0,
"AIC_model" = 0,
"st1_par0"= 0,
"st1_par1"=0,
"st2_par0"=0,
"st2_par1"= 0)
repetitions <- seq(1, 1000,1)
runModel <- "yes"
if (runModel == "yes"){
for (modelStep in c("weibull", "gamma")){
print(modelStep)
rangePar0 <- runif(1000, rangosDist[[modelStep]][[1]][1], rangosDist[[modelStep]][[1]][2])
rangePar1 <- runif(1000, rangosDist[[modelStep]][[2]][1], rangosDist[[modelStep]][[2]][2])
for (rep in repetitions){
par0 <- c(sample(rangePar0,1, replace= TRUE),
sample(rangePar0,1, replace= TRUE)) # step mean (two parameters: one for each state)
par1 <- c(sample(rangePar1,1, replace= TRUE),
sample(rangePar1,1, replace= TRUE))
par0 <- round(par0, 4)
par1 <- round(par1, 4)
#print(par0)
#print(par1)
stepPar <- c(par0,par1)
#op1
tryCatch({
m_cosecha<- fitHMM(data = dataCosecha, stepDist = modelStep,
nbStates = 2 , stepPar0 = stepPar, angleDist = "none")
},
error=function(cond){
print("error de parametros")
print(stepPar)
message(cond)
}
)
minNegLike <-  m_cosecha$mod$minimum
AIC_model <- AIC(m_cosecha)
DF_TEMP <- data.frame("model"= modelStep,
"prior_par0_st1_st2"= paste(par0[1], "_", par0[2]),
"prior_par1_st1_st2"=  paste(par1[1], "_", par1[2]),
"minNegLike" = minNegLike,
"AIC_model" = AIC_model,
"st1_par0"= m_cosecha$mle$stepPar[1,1],
"st1_par1"= m_cosecha$mle$stepPar[2,1],
"st2_par0"= m_cosecha$mle$stepPar[1,2],
"st2_par1"= m_cosecha$mle$stepPar[2,2])
DF_TOTAL <- rbind(DF_TOTAL, DF_TEMP)
}
}
DF_TOTAL <- DF_TOTAL%>%
filter(model != 0)
write_csv(DF_TOTAL, paste("../output/wholeTable_100repsPorFinca",as.character(mode), ".csv", sep = "_"))
}
}
for (mode in c("E", "C")){
WP_COSECHA_UTM_SP_PRE_F <- WP_COSECHA_UTM_SP_PRE %>% filter (Finca == as.character(mode))
WP_COSECHA_UTM_SP_PRE_F$Finca <- NULL
WP_COSECHA_UTM_SP_PRE_F$IDperFinca <- NULL
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE_F, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
DF_TOTAL_ONESTATE <- data.frame("model"= 0,
"prior_par0_st1"= 0,
"prior_par1_st1" = 0,
"minNegLike" = 0,
"AIC_model" = 0,
"st1_par0"= 0,
"st1_par1"=0)
repetitions <- seq(1, 1000,1)
runModelSimple <- "yes"
if (runModelSimple == "yes"){
for (modelStep in c("weibull", "gamma")){
print(modelStep)
rangePar0 <- runif(1000, rangosDist[[modelStep]][[1]][1], rangosDist[[modelStep]][[1]][2])  #corre 100000 valores en el rango del parametro 0
rangePar1 <- runif(1000, rangosDist[[modelStep]][[2]][1], rangosDist[[modelStep]][[2]][2]) #corre 100000 valores en el rango del parametro 1
for (rep in repetitions){
par0 <- c(sample(rangePar0,1, replace= TRUE)) # step mean (one parameters: one for each state)
par1 <- c(sample(rangePar1,1, replace= TRUE))
par0 <- round(par0, 4)
par1 <- round(par1, 4)
#print(par0)
#print(par1)
stepPar <- c(par0,par1)
#op1
tryCatch({
m_cosecha_oneState<- fitHMM(data = dataCosecha, stepDist = modelStep,
nbStates = 1 , stepPar0 = stepPar, angleDist = "none")
},
error=function(cond){
print("error de parametros")
print(stepPar)
message(cond)
}
)
minNegLike <-  m_cosecha_oneState$mod$minimum
AIC_model <- AIC(m_cosecha_oneState)
DF_TEMP_ONESTATE <- data.frame("model"= modelStep,
"prior_par0_st1"= par0[1],
"prior_par1_st1"= par1[1],
"minNegLike" = minNegLike,
"AIC_model" = AIC_model,
"st1_par0"= m_cosecha_oneState$mle$stepPar[1],
"st1_par1"= m_cosecha_oneState$mle$stepPar[2])
DF_TOTAL_ONESTATE <- rbind(DF_TOTAL_ONESTATE, DF_TEMP_ONESTATE)
}
}
DF_TOTAL_ONESTATE <- DF_TOTAL_ONESTATE%>%
filter(model != 0)
write_csv(DF_TOTAL_ONESTATE, paste("../output/wholeTableONESTATE_porFinca_100rep",as.character(mode), ".csv", sep = "_"))
}
}
#here we load the simulation with the 100 combinations
#DF_TOTAL_1000 <- read.csv("../output/wholeTable_100_rep_0_20_E_.csv")
DF_TOTAL_2states_E <- read.csv("../output/wholeTable_100repsPorFinca_E_.csv")
DF_TOTAL_2states_C <- read.csv("../output/wholeTable_100repsPorFinca_C_.csv")
DF_TOTAL_1state_E <- read.csv("../output/wholeTableONESTATE_porFinca_100rep_E_.csv")
DF_TOTAL_1state_C <- read.csv("../output/wholeTableONESTATE_porFinca_100rep_C_.csv")
#aqui headear cada una para el pdf#
##pero ahora quitar los priors que no interesan tanto
DF_TOTAL_2states_C$farm <- "C"
DF_TOTAL_2states_E$farm <- "E"
DF_TOTAL_2states <- rbind(DF_TOTAL_2states_C, DF_TOTAL_2states_E)
DF_TOTAL_1state_C$farm <- "C"
DF_TOTAL_1state_E$farm <- "E"
DF_TOTAL_1state <- rbind(DF_TOTAL_1state_C, DF_TOTAL_1state_E)
rm(DF_TOTAL_1state_C)
rm(DF_TOTAL_1state_E)
rm(DF_TOTAL_2states_C)
rm(DF_TOTAL_2states_E)
#we spplit the priors parameters in table of 2 states
DF_TOTAL_2states <- DF_TOTAL_2states %>%
separate(prior_par0_st1_st2, c("prior_par0_st1", "prior_par0_st2"), sep= "_", remove = TRUE) %>%
separate(prior_par1_st1_st2, c("prior_par1_st1", "prior_par1_st2"), sep= "_", remove = TRUE)
DF_TOTAL_2states$prior_par0_st1 <- as.numeric(DF_TOTAL_2states$prior_par0_st1)
DF_TOTAL_2states$prior_par1_st1 <- as.numeric(DF_TOTAL_2states$prior_par1_st1)
DF_TOTAL_2states$prior_par0_st2 <- as.numeric(DF_TOTAL_2states$prior_par0_st2)
DF_TOTAL_2states$prior_par1_st2 <- as.numeric(DF_TOTAL_2states$prior_par1_st2)
DF_TOTAL_2states[,seq(2,11,1)] <- round(DF_TOTAL_2states[,seq(2,11,1)], 2)
###
DF_TOTAL_1state$prior_par0_st2 <- "NA"
DF_TOTAL_1state$prior_par1_st2 <- "NA"
DF_TOTAL_1state$st2_par0 <- "NA"
DF_TOTAL_1state$st2_par1 <- "NA"
DF_TOTAL_1state$states<- 1
DF_TOTAL_2states$states <- 2
DF_TOTAL <- rbind(DF_TOTAL_1state, DF_TOTAL_2states)
#the new data frame will not have the outliers
DF_TOTAL <- DF_TOTAL %>%
filter(st1_par1 >0.00001)%>%
filter((st2_par1 >0.00001) | (st2_par1 == "NA"))
##vamos a qiotar gran AIC
DF_TOTAL_SIN <- DF_TOTAL %>%
filter(AIC_model != "Inf")
FIG_MIN_LIKE <- DF_TOTAL_SIN %>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model, fill= model), size= 3)+
scale_fill_manual(values = c("#AAAAAA", "#FFFFFF")) +
#scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
facet_wrap(~states)+
labs(x= "Distribution", y= "minimum negative log likelihood", shape= "Distribution", fill= "Distribution")
FIG_MIN_LIKE
