geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "black", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state), linetype= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
scale_linetype_manual(values= c(1,4))+
theme_bw()+
labs(x= "Distance", y= "Probability Density Function")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "black", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state), linetype= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
scale_linetype_manual(values= c(1,1))+
theme_bw()+
labs(x= "Distance", y= "Probability Density Function")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "black", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state), linetype= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
scale_linetype_manual(values= c(1,1))+
theme_bw()+
labs(x= "Distance", y= "Probability Density Function", col= "State")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "black", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Distance", y= "Probability Density Function", col= "State")
DIS_PLOT
FIG_AIC_model <- DF_1000_SIN %>%
filter(AIC_model != "Inf")%>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model), size= 4)+
#scale_fill_manual(values = colorsGris) +
scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
FIG_AIC_model
FIG_AIC_model <- DF_1000_SIN %>%
filter(AIC_model != "Inf")%>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model, fill= model), size= 4)+
scale_fill_manual(values = colorsGris) +
#scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
FIG_AIC_model
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "white", fill= "#AAAAAA") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "#CCCCCC", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, size= 0.5, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "white", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, size= 0.01, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "white", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, size= 0.1, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "white", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
plotStates(modelos_p$gamma)
plotStates(modelos_p$gamma)
?plotStates()
p1 <- plot(modelos_p$weibull, animals = c("I_Car12", "H_Fran9"), ask = FALSE, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
p1
View(p1)
plot(modelos_p$weibull, animals = c("I_Car12", "H_Fran9"), ask = FALSE, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
plot(modelos_p$weibull, animals = c("I_Car12", "H_Fran9"), ask = T, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
plot(modelos_p$weibull, animals = c("I_Car12", "H_Fran9"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
plot(modelos_p$weibull, animals = c("I_Car12", "H_Fran9"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
plotStates(modelos_p$weibull, ask = F, animals = c("I_Car12", "H_Fran9"))
plot(modelos_p$weibull, animals = c("H_Fran9", "I_Car12"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(moveHMM)
library(knitr)
library(reshape2)
colorsGris <- c("black","#555555", "white")
groupColors3 <- c("#021128", "#fd9706", "#1b4a64" )
groupColors2 <- c("#021128", "#fd9706")
mycols3c <-c("#759580", "#1b4a64")
WP_COSECHA_UTM_SP <- read.csv("../data/cleanData_wayPointsCoffee_UTM.csv", stringsAsFactors = FALSE )
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>%
mutate(finca = replace(finca, finca == "Irlanda", "I")) %>%
mutate(finca = replace(finca, finca == "Hamburgo", "H"))
WP_COSECHA_UTM_SP$zona[WP_COSECHA_UTM_SP$zona == "falta"] <- "zonaBaja"
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>% rowwise() %>%
group_by(ID_REC, pante)%>%  #esto debe seguirse con lo de aajo
mutate(xNorm = x_UTM - min(x_UTM)) %>%
mutate(yNorm = y_UTM - min(y_UTM))
#now the precision (not the accuracy) of the GPS goes to 5 decimal points (lat y lot) and this is equivalent to ~1m
#so we can round the xNorm and y yNorm
WP_COSECHA_UTM_SP$xNorm <- round(WP_COSECHA_UTM_SP$xNorm, 0)
WP_COSECHA_UTM_SP$yNorm <- round(WP_COSECHA_UTM_SP$yNorm, 0)
#we remove some spurious data were delta = 0
WP_COSECHA_UTM_SP <- WP_COSECHA_UTM_SP %>%
filter(delta !=0)%>%
unite("Finca_ID_REC", finca, ID_REC, remove = FALSE)
#we create this ID column to prepare the data for movehmm
WP_COSECHA_UTM_SP_PRE <- WP_COSECHA_UTM_SP %>%
dplyr::select("ID" = Finca_ID_REC, xNorm, yNorm)
WP_COSECHA_UTM_SP_PRE$pante <- NULL
WP_COSECHA_UTM_SP_PRE$ID_REC <- NULL
mapHarvest_total<- WP_COSECHA_UTM_SP_PRE %>%
separate(ID, into = c("Finca", "IDREC"), sep = "_", remove = FALSE)%>%
ggplot(aes(x= xNorm, y = yNorm)) +
geom_path(aes(col= Finca), size= 1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_manual(values= mycols3c)+
facet_wrap(~ ID, ncol=3)+
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
labs(x= "X_norm", y= "Y_norm", col= "Farm")
#ggsave("../output/mapHarvest_I.png", height = 8, width = 12, device = "png")
mapHarvest_total
dataCosecha <- prepData(WP_COSECHA_UTM_SP_PRE, type= "UTM", coordNames = c("xNorm", "yNorm"))
#we remove the steps equal to zero (when the worker harvest 2 trees separated by less than a meter..)
dataCosecha <- dataCosecha %>%
filter(step!= 0)  #we remove the zeros
summary(dataCosecha)
kable(head(dataCosecha), caption = "First lines of the movehmm object")
pHisto_step <-dataCosecha %>%
separate(ID, into = c("Finca", "IDREC"), sep = "_", remove = FALSE)%>%
ggplot(aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..])) +
geom_histogram(binwidth=2, color= "black", aes(fill=as.character(Finca))) +
scale_fill_manual(values= mycols3c)+
facet_wrap(~Finca)+
theme(panel.spacing = unit(0.8, "lines"),
text = element_text(size = 15))+
theme_bw()+
labs(x= "Distance (in m)", y= "Proportion", fill= "Farm")
pHisto_step
pHisto_angle <-dataCosecha %>%
separate(ID, into = c("Finca", "IDREC"), sep = "_", remove = FALSE)%>%
ggplot(aes(x= as.numeric(angle), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..])) +
geom_histogram(binwidth=0.5, color= "black", aes(fill=as.character(Finca))) +
coord_polar(theta="x", start=pi/2, direction=-1)+
scale_fill_manual(values= mycols3c)+
facet_wrap(~Finca)+
theme(panel.spacing = unit(0.8, "lines"),
text = element_text(size = 15))+
theme_bw()+
labs(x= "Angle (in radians)", y= "Proportion", fill= "Farm")
pHisto_angle
pHisto_step_general <-dataCosecha %>%
ggplot(aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..])) +
geom_histogram(binwidth=2, color= "black", aes(fill=as.character(ID))) +
scale_fill_viridis_d()+
theme(panel.spacing = unit(0.8, "lines"),
text = element_text(size = 15))+
theme_bw()+
labs(x= "Distance (in m)", y= "Proportion", fill= "ID")
pHisto_step_general
rangosDist <- list("gamma" = list("mean" = c(0.1, 20), "sd" = c(0.1,20)),
"weibull" = list("shape" = c(0, 2.7), "scale" = c(0.1,15))  ##segun el articulo
)
DF_rangos <- data.frame("value" = c("min", "max"))
DF_rangos <- cbind(DF_rangos, as.data.frame(rangosDist))
kable(DF_rangos, caption = "Minimun and maximum values of the prior parameters for each distribution")
DF_TOTAL <- data.frame("model"= 0,
"prior_par0_st1_st2"= 0,
"prior_par1_st1_st2" = 0,
"minNegLike" = 0,
"AIC_model" = 0,
"st1_par0"= 0,
"st1_par1"=0,
"st2_par0"=0,
"st2_par1"= 0)
repetitions <- seq(1, 1000,1)
runModel <- "no"
if (runModel == "yes"){
for (modelStep in c("weibull", "gamma")){
print(modelStep)
rangePar0 <- runif(100000, rangosDist[[modelStep]][[1]][1], rangosDist[[modelStep]][[1]][2])
rangePar1 <- runif(100000, rangosDist[[modelStep]][[2]][1], rangosDist[[modelStep]][[2]][2])
for (rep in repetitions){
par0 <- c(sample(rangePar0,1, replace= TRUE),
sample(rangePar0,1, replace= TRUE)) # step mean (two parameters: one for each state)
par1 <- c(sample(rangePar1,1, replace= TRUE),
sample(rangePar1,1, replace= TRUE))
par0 <- round(par0, 4)
par1 <- round(par1, 4)
#print(par0)
#print(par1)
stepPar <- c(par0,par1)
#op1
tryCatch({
m_cosecha<- fitHMM(data = dataCosecha, stepDist = modelStep,
nbStates = 2 , stepPar0 = stepPar, angleDist = "none")
},
error=function(cond){
print("error de parametros")
print(stepPar)
message(cond)
}
)
minNegLike <-  m_cosecha$mod$minimum
AIC_model <- AIC(m_cosecha)
DF_TEMP <- data.frame("model"= modelStep,
"prior_par0_st1_st2"= paste(par0[1], "_", par0[2]),
"prior_par1_st1_st2"=  paste(par1[1], "_", par1[2]),
"minNegLike" = minNegLike,
"AIC_model" = AIC_model,
"st1_par0"= m_cosecha$mle$stepPar[1,1],
"st1_par1"= m_cosecha$mle$stepPar[2,1],
"st2_par0"= m_cosecha$mle$stepPar[1,2],
"st2_par1"= m_cosecha$mle$stepPar[2,2])
DF_TOTAL <- rbind(DF_TOTAL, DF_TEMP)
}
}
DF_TOTAL <- DF_TOTAL%>%
filter(model != 0)
}
#write_csv(DF_TOTAL, "../output/wholeTable_1000_rep_0_20.csv")
DF_TOTAL_1000 <- read.csv("../output/wholeTable_1000_rep_0_20.csv")
DF_TOTAL_1000 <- DF_TOTAL_1000 %>%
filter(model != "lnorm") %>%
separate(prior_par0_st1_st2, c("pr_par0_st1", "pr_par0_st2"), sep= "_", remove = TRUE) %>%
separate(prior_par1_st1_st2, c("pr_par1_st1", "pr_par1_st2"), sep= "_", remove = TRUE)
DF_TOTAL_1000$pr_par0_st1 <- as.numeric(DF_TOTAL_1000$pr_par0_st1)
DF_TOTAL_1000$pr_par1_st1 <- as.numeric(DF_TOTAL_1000$pr_par1_st1)
DF_TOTAL_1000$pr_par0_st2 <- as.numeric(DF_TOTAL_1000$pr_par0_st2)
DF_TOTAL_1000$pr_par1_st2 <- as.numeric(DF_TOTAL_1000$pr_par1_st2)
DF_TOTAL_1000[,seq(2,11,1)] <- round(DF_TOTAL_1000[,seq(2,11,1)], 2)
#here we have the outiers that were removed
DF_1000_OUTLIERS <- DF_TOTAL_1000 %>%
filter(st1_par1 <0.00001 | st2_par1 <0.00001)
DF_1000_OUTLIERS <- DF_1000_OUTLIERS %>%
group_by(model) %>%
mutate(conteo = 1)%>%
mutate(contador = cumsum(conteo))
DF_1000_SIN <- DF_TOTAL_1000 %>%
filter(st1_par1 >0.00001 & st2_par1 >0.00001)
FIG_AIC_model <- DF_1000_SIN %>%
filter(AIC_model != "Inf")%>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model, fill= model), size= 4)+
scale_fill_manual(values = c("#AAAAAA", "#FFFFFF")) +
#scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
FIG_AIC_model
DF_TOTAL_MIN <- DF_1000_SIN %>%
group_by(model)%>%
filter(AIC_model == min(AIC_model)) %>%
group_by(model, AIC_model) %>%
mutate(conteo = 1)%>%
mutate(contador= cumsum(conteo))%>%
filter(contador ==1)
DF_TOTAL_MIN$conteo <- NULL
DF_TOTAL_MIN$contador <- NULL
DF_TOTAL_MIN_SHOW <- DF_TOTAL_MIN
names(DF_TOTAL_MIN_SHOW) <- (c("model","pr_st1_p1", "pr_st1_p2", "pr_st2_p1", "pr_st2_p2", "minNegL", "AIC", "s1_p1", "s1_p2", "s2_p2", "s2_p2"))
kable(DF_TOTAL_MIN_SHOW, caption = "Best models for each of the distributions. pr:prior, st1: state 1, p1: parameter 1 (shape for weibull and mean for gamma, p2: parameter 2 (scale for weibull and sd for gamma).")
finalParameters <- read.csv("./tableParameters.csv")
finalParameters[,2] <- round(finalParameters[,2],2)
finalParameters[,3] <- round(finalParameters[,3],2)
kable(finalParameters, caption = "Final parameters for both gamma and weibull distributions. For the gamma distribution $\\alpha = \\mu/\\sigma^2$; $\\beta = \\mu^2/\\sigma^2$; $\\theta = 1/\\beta$.")
X= seq(1, 120, 1)
DF_weibull_st1 <- data.frame("distribution"= c("weibull"), "state" = 1, "X"= X,  "PDF" = dweibull(X, shape= 2.05, scale= 4.71))
DF_weibull_st2 <- data.frame("distribution"= c("weibull"), "state" = 2, "X"= X,  "PDF" = dweibull(X, shape= 1.05, scale= 14.45))
DF_gamma_st1 <- data.frame("distribution"= c("gamma"), "state" = 1, "X"= X,  "PDF" = dgamma(X, shape= 1.3, rate = 0.075))
DF_gamma_st2 <- data.frame("distribution"= c("gamma"), "state" = 2, "X"= X,  "PDF" = dgamma(X, shape= 3.62, rate = 0.845))
DF_DISTRI <- rbind(DF_weibull_st1, DF_weibull_st2, DF_gamma_st1, DF_gamma_st2)
DIS_PLOT<- ggplot() +
geom_histogram(data= dataCosecha, size= 0.2, aes(x= as.numeric(step), y=(..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..]), binwidth=2, color= "white", fill= "#CCCCCC") +
geom_line(data = DF_DISTRI, size= 1, aes(x= X, y= PDF, col= as.factor(state)))+
facet_grid(~ distribution, scales = "free_y")+
scale_color_manual(values =
groupColors2)+
theme_bw()+
labs(x= "Step size (in m)", y= "Probability Density Function", col= "State")
DIS_PLOT
modelos_p <- list("gamma" = 0,
"weibull" = 0)
for (i in seq(1,dim(DF_TOTAL_MIN)[1],1)){
par0_p <- as.numeric(c(DF_TOTAL_MIN$pr_par0_st1[i], DF_TOTAL_MIN$pr_par0_st2[i]))
par1_p <- as.numeric(c(DF_TOTAL_MIN$pr_par1_st1[i], DF_TOTAL_MIN$pr_par1_st2[i]))
stepPar0_p <- c(par0_p, par1_p)
#print(stepPar0_p)
#op1
m_cosecha_p<- fitHMM(data = dataCosecha, nbStates = 2 , stepPar0 = stepPar0_p, angleDist = "none", stepDist = as.character(DF_TOTAL_MIN$model[i]))
modelos_p[[as.character(DF_TOTAL_MIN$model[i])]] <- m_cosecha_p
}
#plotStates(modelos_p$gamma, ask = F, animals = c( "H_Fran9", "I_Car12"))
plot(modelos_p$gamma, animals = c("H_Fran9", "I_Car12"), ask = F, plotTracks = TRUE, breaks = 100, col = groupColors2, lwd=3.0)
dataCosecha_V <- dataCosecha
dataCosecha_V$state <- viterbi(modelos_p$gamma)
dataCosecha_V <- dataCosecha_V %>%
mutate(conteo = 1)%>%
group_by(ID) %>%
mutate(contador = cumsum(conteo))
binaryPlot <- dataCosecha_V %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= contador , y= ID, fill= as.factor(state)))+
geom_tile(col= "white")+
facet_wrap(~Farm, scales= "free_y")+
scale_fill_manual(values= groupColors2)+
theme_bw()
dataStates <- dataCosecha_V %>%
group_by(ID, state)%>%
summarise(numStates = sum(conteo))
dataStates <- dataStates %>%
ungroup()%>%  #no entiendo que estaba agrupado, supongo que el ID con el state...
complete(ID, state)
dataStates$numStates[is.na(dataStates$numStates)] <- 0
###AQUI MEQEUDEEEEEE FALTA HACER LA GRAFICA DE PORCENTAJE; VS FINCA; VS LONGITUD DE RECPRRIDO Y YA
binaryPlot
binaryPlot <- dataCosecha_V %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= contador , y= ID, fill= as.factor(state)))+
geom_tile()+
facet_wrap(~Farm, scales= "free_y")+
scale_fill_manual(values= groupColors2)+
theme_bw()
binaryPlot
dataStates <- dataCosecha_V %>%
group_by(ID, state)%>%
summarise(numStates = sum(conteo))
View(dataStates)
dataTempTot <-  dataCosecha_V %>%
group_by(ID)%>%
summarise(numStates = sum(conteo))
View(dataTempTot)
dataStates <- dataStates %>%
ungroup()%>%  #no entiendo que estaba agrupado, supongo que el ID con el state...
complete(ID, state)
dataStates$numStates[is.na(dataStates$numStates)] <- 0
dataStates <- dataCosecha_V %>%
group_by(ID, state)%>%
summarise(numStates = sum(conteo))
dataStates <- dataStates %>%
ungroup()%>%  #no entiendo que estaba agrupado, supongo que el ID con el state...
complete(ID, state)%>%
filter(state==1)
dataStates$numStates[is.na(dataStates$numStates)] <- 0
dataTempTot <-  dataCosecha_V %>%
group_by(ID)%>%
summarise(totalStep = sum(conteo))
dataStates$totalStep <- dataTempTot$totalStep
View(dataStates)
dataStates$percentage_ST1 <- (dataStates$numStates/dataStates$totalStep)*100
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= totalStep , y= percentage_ST1, fill= as.factor(Farm)))+
geom_point()+
facet_wrap(~Farm, scales= "free_y")+
scale_color_manual(values= groupColors2)+
theme_bw()
binaryPlot
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= totalStep , y= percentage_ST1, col= as.factor(Farm)))+
geom_point()+
scale_color_manual(values= mycols3c)+
theme_bw()
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= totalStep , y= percentage_ST1, shape= as.factor(farm), col= as.factor(Farm)))+
geom_point()+
scale_color_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), col= as.factor(Farm)))+
geom_point()+
scale_color_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point()+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point()+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
legend(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point()+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point(size= 3)+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot
FIG_AIC_model <- DF_1000_SIN %>%
filter(AIC_model != "Inf")%>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model, fill= model), size= 4)+
scale_fill_manual(values = c("#AAAAAA", "#FFFFFF")) +
#scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Distribution", y= "minimum negative log likelihood", shape= "Distribution", fill= distribution )
FIG_AIC_model <- DF_1000_SIN %>%
filter(AIC_model != "Inf")%>%
ggplot()+
geom_jitter(aes(x= model, y= minNegLike, shape= model, fill= model), size= 4)+
scale_fill_manual(values = c("#AAAAAA", "#FFFFFF")) +
#scale_fill_manual(values = groupColors3) +
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Distribution", y= "minimum negative log likelihood", shape= "Distribution", fill= "Distribution")
FIG_AIC_model
View(DF_1000_SIN)
table(viterbi(m_cosecha_p))
modelos_p
table(viterbi(modelos_p$gamma))
42/(42+1093)
42/(42+1093)*100
table(viterbi(modelos_p$weibull))
59/(1076+59)
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point(size= 3)+
geom_segment(aes(x= 2, xmax= 4, y=2, ymax= 5))+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point(size= 3)+
geom_segment(aes(x= 2, xend= 4, y=2, yend= 5))+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot
#https://cran.r-project.org/web/packages/moveHMM/vignettes/moveHMM-guide.pdf
#https://theomichelot.github.io/software/
#https://statisticsbyjim.com/probability/weibull-distribution/
summary(dataStates)
perST1_plot <- dataStates %>%
separate(ID, sep= "_", into = c("Farm", "ID"), remove = T) %>%
ggplot(col= "black", aes(x= totalStep , y= percentage_ST1, shape= as.factor(Farm), fill= as.factor(Farm)))+
geom_point(size= 3)+
geom_segment(aes(x= 60, xend= 160, y=3.8, yend= 3.8), linetype= 2)+
scale_fill_manual(values= mycols3c)+
scale_shape_manual(values = c(21, 24, 22))+
theme_bw()+
labs(x= "Total number of steps", y= "% of steps from State 1", fill= "Farm", shape= "Farm")
perST1_plot
